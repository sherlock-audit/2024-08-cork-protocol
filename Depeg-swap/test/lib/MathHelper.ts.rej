diff a/Depeg-swap/test/lib/MathHelper.ts b/Depeg-swap/test/lib/MathHelper.ts	(rejected hunks)
@@ -19,13 +19,15 @@ describe("Math Helper", function () {
       const ratio = parseEther("0.5");
       const amount = parseEther("10");
 
+      const defaultCtPrice = parseEther("1");
+
       const [wa, ct] =
         await contract.read.calculateProvideLiquidityAmountBasedOnCtPrice([
           amount,
           ratio,
+          defaultCtPrice,
         ]);
 
-
       // since it costs a half of whatever ct here, it essentially boils down
       // 6666666666666666666 / 2 = 3333333333333333333 + 1
       const expectedCt = BigInt("6666666666666666666");
@@ -41,11 +43,13 @@ describe("Math Helper", function () {
       // ct price
       const ratio = parseEther("2");
       const amount = parseEther("10");
+      const defaultCtPrice = parseEther("1");
 
       const [wa, ct] =
         await contract.read.calculateProvideLiquidityAmountBasedOnCtPrice([
           amount,
           ratio,
+          defaultCtPrice,
         ]);
 
       // this is just basically a reverse from the above with some imprecision of ~0,000000000000000001
@@ -105,11 +109,13 @@ describe("Math Helper", function () {
       expect(ratio).to.equal(expectedRatio);
 
       const amount = parseEther("10");
+      const defaultCtPrice = parseEther("1");
 
       const [wa, ct] =
         await contract.read.calculateProvideLiquidityAmountBasedOnCtPrice([
           amount,
           ratio,
+          defaultCtPrice,
         ]);
 
       expect(ct).to.equal(parseEther("2"));
@@ -138,7 +144,7 @@ describe("Math Helper", function () {
 
       const contract = await loadFixture(deployMathHelper);
 
-      const result = await contract.read.calculatePrecentageFee([fee, amount]);
+      const result = await contract.read.calculatePercentageFee([fee, amount]);
       expect(result).to.equal(parseEther("10"));
     });
 
@@ -345,7 +351,6 @@ describe("Math Helper", function () {
 
       const rate3 = parseEther("0.5");
 
-
       const deposit3 =
         await contract.read.calculateDepositAmountWithExchangeRate([
           amount,
