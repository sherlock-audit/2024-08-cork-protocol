diff a/Depeg-swap/contracts/core/Psm.sol b/Depeg-swap/contracts/core/Psm.sol	(rejected hunks)
@@ -1,4 +1,4 @@
-pragma solidity 0.8.24;
+pragma solidity ^0.8.24;
 
 import {PsmLibrary} from "../libraries/PsmLib.sol";
 import {VaultLibrary} from "../libraries/VaultLib.sol";
@@ -18,12 +18,12 @@ abstract contract PsmCore is IPSMcore, ModuleState, Context {
     using PairLibrary for Pair;
 
     /**
-     * @notice returns the fee precentage for repurchasing(1e18 = 1%)
+     * @notice returns the fee percentage for repurchasing(1e18 = 1%)
      * @param id the id of PSM
      */
     function repurchaseFee(Id id) external view override returns (uint256) {
         State storage state = states[id];
-        return state.repurchaseFeePrecentage();
+        return state.repurchaseFeePercentage();
     }
 
     /**
@@ -31,12 +31,17 @@ abstract contract PsmCore is IPSMcore, ModuleState, Context {
      * @param id the id of PSM
      * @param amount the amount of RA to use
      */
-    function repurchase(Id id, uint256 amount) external override {
+    function repurchase(Id id, uint256 amount)
+        external
+        override
+        PSMRepurchaseNotPaused(id)
+        returns (uint256 dsId, uint256 received, uint256 feePercentage, uint256 fee, uint256 exchangeRates)
+    {
         State storage state = states[id];
-        (uint256 dsId, uint256 received, uint256 feePrecentage, uint256 fee, uint256 exchangeRates) =
+        (dsId, received, feePercentage, fee, exchangeRates) =
             state.repurchase(_msgSender(), amount, getRouterCore(), getAmmRouter());
 
-        emit Repurchased(id, _msgSender(), dsId, amount, received, feePrecentage, fee, exchangeRates);
+        emit Repurchased(id, _msgSender(), dsId, amount, received, feePercentage, fee, exchangeRates);
     }
 
     /**
@@ -45,7 +50,7 @@ abstract contract PsmCore is IPSMcore, ModuleState, Context {
      * @param amount the amount of RA to use
      * @return dsId the id of the DS
      * @return received the amount of RA received
-     * @return feePrecentage the fee in precentage
+     * @return feePercentage the fee in percentage
      * @return fee the fee charged
      * @return exchangeRates the effective DS exchange rate at the time of repurchase
      */
@@ -53,10 +58,11 @@ abstract contract PsmCore is IPSMcore, ModuleState, Context {
         external
         view
         override
-        returns (uint256 dsId, uint256 received, uint256 feePrecentage, uint256 fee, uint256 exchangeRates)
+        PSMRepurchaseNotPaused(id)
+        returns (uint256 dsId, uint256 received, uint256 feePercentage, uint256 fee, uint256 exchangeRates)
     {
         State storage state = states[id];
-        (dsId, received, feePrecentage, fee, exchangeRates,) = state.previewRepurchase(amount);
+        (dsId, received, feePercentage, fee, exchangeRates,) = state.previewRepurchase(amount);
     }
 
     /**
@@ -120,23 +126,22 @@ abstract contract PsmCore is IPSMcore, ModuleState, Context {
         (ctReceived, dsReceived, dsId) = state.previewDeposit(amount);
     }
 
-    function redeemRaWithDs(Id id, uint256 dsId, uint256 amount, bytes memory rawDsPermitSig, uint256 deadline)
+    function redeemRaWithDs(Id id, uint256 dsId, uint256 amount, address redeemer, bytes memory rawDsPermitSig, uint256 deadline)
         external
         override
         nonReentrant
         onlyInitialized(id)
         PSMWithdrawalNotPaused(id)
+        returns (uint256 received, uint256 _exchangeRate, uint256 fee)
     {
         State storage state = states[id];
-        // gas savings
-        uint256 feePrecentage = psmBaseRedemptionFeePrecentage;
 
-        (uint256 received, uint256 _exchangeRate, uint256 fee) =
-            state.redeemWithDs(_msgSender(), amount, dsId, rawDsPermitSig, deadline, feePrecentage);
+        (received, _exchangeRate, fee) =
+            state.redeemWithDs(redeemer, amount, dsId, rawDsPermitSig, deadline);
 
         VaultLibrary.provideLiquidityWithFee(state, fee, getRouterCore(), getAmmRouter());
 
-        emit DsRedeemed(id, dsId, _msgSender(), amount, received, _exchangeRate, feePrecentage, fee);
+        emit DsRedeemed(id, dsId, redeemer, amount, received, _exchangeRate, state.psm.psmBaseRedemptionFeePercentage, fee);
     }
 
     function redeemRaWithDs(Id id, uint256 dsId, uint256 amount)
@@ -145,17 +150,15 @@ abstract contract PsmCore is IPSMcore, ModuleState, Context {
         nonReentrant
         onlyInitialized(id)
         PSMWithdrawalNotPaused(id)
+        returns (uint256 received, uint256 _exchangeRate, uint256 fee)
     {
         State storage state = states[id];
-        // gas savings
-        uint256 feePrecentage = psmBaseRedemptionFeePrecentage;
 
-        (uint256 received, uint256 _exchangeRate, uint256 fee) =
-            state.redeemWithDs(_msgSender(), amount, dsId, bytes(""), 0, feePrecentage);
+        (received, _exchangeRate, fee) = state.redeemWithDs(_msgSender(), amount, dsId, bytes(""), 0);
 
         VaultLibrary.provideLiquidityWithFee(state, fee, getRouterCore(), getAmmRouter());
 
-        emit DsRedeemed(id, dsId, _msgSender(), amount, received, _exchangeRate, feePrecentage, fee);
+        emit DsRedeemed(id, dsId, _msgSender(), amount, received, _exchangeRate, state.psm.psmBaseRedemptionFeePercentage, fee);
     }
 
     /**
@@ -174,25 +177,27 @@ abstract contract PsmCore is IPSMcore, ModuleState, Context {
         override
         onlyInitialized(id)
         PSMWithdrawalNotPaused(id)
-        returns (uint256 assets)
+        returns (uint256 assets, uint256 fee, uint256 feePercentage)
     {
         State storage state = states[id];
-        assets = state.previewRedeemWithDs(dsId, amount);
+        
+        feePercentage = state.psm.psmBaseRedemptionFeePercentage;
+        (assets, fee) = state.previewRedeemWithDs(dsId, amount);
     }
 
-    function redeemWithCT(Id id, uint256 dsId, uint256 amount, bytes memory rawCtPermitSig, uint256 deadline)
+    function redeemWithCT(Id id, uint256 dsId, uint256 amount, address redeemer, bytes memory rawCtPermitSig, uint256 deadline)
         external
         override
         nonReentrant
         onlyInitialized(id)
         PSMWithdrawalNotPaused(id)
+        returns (uint256 accruedPa, uint256 accruedRa)
     {
         State storage state = states[id];
 
-        (uint256 accruedPa, uint256 accruedRa) =
-            state.redeemWithCt(_msgSender(), amount, dsId, rawCtPermitSig, deadline);
+        (accruedPa, accruedRa) = state.redeemWithCt(redeemer, amount, dsId, rawCtPermitSig, deadline);
 
-        emit CtRedeemed(id, dsId, _msgSender(), amount, accruedPa, accruedRa);
+        emit CtRedeemed(id, dsId, redeemer, amount, accruedPa, accruedRa);
     }
 
     function redeemWithCT(Id id, uint256 dsId, uint256 amount)
@@ -201,10 +206,11 @@ abstract contract PsmCore is IPSMcore, ModuleState, Context {
         nonReentrant
         onlyInitialized(id)
         PSMWithdrawalNotPaused(id)
+        returns (uint256 accruedPa, uint256 accruedRa)
     {
         State storage state = states[id];
 
-        (uint256 accruedPa, uint256 accruedRa) = state.redeemWithCt(_msgSender(), amount, dsId, bytes(""), 0);
+        (accruedPa, accruedRa) = state.redeemWithCt(_msgSender(), amount, dsId, bytes(""), 0);
 
         emit CtRedeemed(id, dsId, _msgSender(), amount, accruedPa, accruedRa);
     }
@@ -242,23 +248,25 @@ abstract contract PsmCore is IPSMcore, ModuleState, Context {
     function redeemRaWithCtDs(
         Id id,
         uint256 amount,
+        address redeemer,
         bytes memory rawDsPermitSig,
         uint256 dsDeadline,
         bytes memory rawCtPermitSig,
         uint256 ctDeadline
-    ) external override nonReentrant PSMWithdrawalNotPaused(id) {
+    ) external override nonReentrant PSMWithdrawalNotPaused(id) returns (uint256 ra, uint256 dsId, uint256 rates) {
         State storage state = states[id];
-        (uint256 ra, uint256 dsId, uint256 rates) =
-            state.redeemRaWithCtDs(_msgSender(), amount, rawDsPermitSig, dsDeadline, rawCtPermitSig, ctDeadline);
+        (ra, dsId, rates) =
+            state.redeemRaWithCtDs(redeemer, amount, rawDsPermitSig, dsDeadline, rawCtPermitSig, ctDeadline);
 
-        emit Cancelled(id, dsId, _msgSender(), ra, amount, rates);
+        emit Cancelled(id, dsId, redeemer, ra, amount, rates);
     }
 
     /**
      * @notice returns amount of ra user will get when Redeem RA with CT+DS
      * @param id The PSM id
      * @param amount amount user wants to redeem
-     * @return received amount of RA user received
+     * @return ra amount of RA user received
+     * @return dsId the id of DS
      * @return rates the effective rate at the time of redemption
      */
     function redeemRaWithCtDs(Id id, uint256 amount)
@@ -266,14 +274,13 @@ abstract contract PsmCore is IPSMcore, ModuleState, Context {
         override
         nonReentrant
         PSMWithdrawalNotPaused(id)
-        returns (uint256 received, uint256 rates)
+        returns (uint256 ra, uint256 dsId, uint256 rates)
     {
         State storage state = states[id];
-        uint256 dsId;
 
-        (received, dsId, rates) = state.redeemRaWithCtDs(_msgSender(), amount, bytes(""), 0, bytes(""), 0);
+        (ra, dsId, rates) = state.redeemRaWithCtDs(_msgSender(), amount, bytes(""), 0, bytes(""), 0);
 
-        emit Cancelled(id, dsId, _msgSender(), received, amount, rates);
+        emit Cancelled(id, dsId, _msgSender(), ra, amount, rates);
     }
 
     /**
@@ -297,7 +304,66 @@ abstract contract PsmCore is IPSMcore, ModuleState, Context {
     /**
      * @notice returns base redemption fees (1e18 = 1%)
      */
-    function baseRedemptionFee() external view override returns (uint256) {
-        return psmBaseRedemptionFeePrecentage;
+    function baseRedemptionFee(Id id) external view override returns (uint256) {
+        State storage state = states[id];
+        return state.psm.psmBaseRedemptionFeePercentage;
+    }
+
+    function psmAcceptFlashSwapProfit(Id id, uint256 profit) external onlyFlashSwapRouter {
+        State storage state = states[id];
+        state.acceptRolloverProfit(profit);
+    }
+
+    function rolloverCt(
+        Id id,
+        address owner,
+        uint256 amount,
+        uint256 dsId,
+        bytes memory rawCtPermitSig,
+        uint256 ctDeadline
+    )
+        external
+        PSMDepositNotPaused(id)
+        returns (uint256 ctReceived, uint256 dsReceived, uint256 _exchangeRate, uint256 paReceived)
+    {
+        State storage state = states[id];
+        (ctReceived, dsReceived, _exchangeRate, paReceived) =
+            state.rolloverCt(owner, amount, dsId, getRouterCore(), rawCtPermitSig, ctDeadline);
+        emit RolledOver(
+            id, state.globalAssetIdx, owner, dsId, amount, dsReceived, ctReceived, paReceived, _exchangeRate
+        );
+    }
+
+    function rolloverCt(Id id, address owner, uint256 amount, uint256 dsId)
+        external
+        PSMDepositNotPaused(id)
+        returns (uint256 ctReceived, uint256 dsReceived, uint256 _exchangeRate, uint256 paReceived)
+    {
+        State storage state = states[id];
+        bytes memory signaturePlaceHolder;
+        (ctReceived, dsReceived, _exchangeRate, paReceived) =
+            state.rolloverCt(owner, amount, dsId, getRouterCore(), signaturePlaceHolder, 0);
+        emit RolledOver(
+            id, state.globalAssetIdx, _msgSender(), dsId, amount, dsReceived, ctReceived, paReceived, _exchangeRate
+        );
+    }
+
+    function claimAutoSellProfit(Id id, uint256 dsId, uint256 amount)
+        external
+        returns (uint256 profit, uint256 dsReceived)
+    {
+        State storage state = states[id];
+        (profit, dsReceived) = state.claimAutoSellProfit(getRouterCore(), _msgSender(), dsId, amount);
+        emit RolloverProfitClaimed(id, dsId, _msgSender(), amount, profit, dsReceived);
+    }
+
+    function rolloverProfitRemaining(Id id, uint256 dsId) external view returns (uint256) {
+        State storage state = states[id];
+        return state.psm.poolArchive[dsId].rolloverClaims[msg.sender];
+    }
+
+    function updatePsmAutoSellStatus(Id id, address user, bool status) external {
+        State storage state = states[id];
+        state.updateAutoSell(user, status);
     }
 }
