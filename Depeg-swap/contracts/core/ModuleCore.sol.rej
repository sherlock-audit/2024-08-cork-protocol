diff a/Depeg-swap/contracts/core/ModuleCore.sol b/Depeg-swap/contracts/core/ModuleCore.sol	(rejected hunks)
@@ -1,5 +1,7 @@
-pragma solidity 0.8.24;
+pragma solidity ^0.8.24;
 
+import {OwnableUpgradeable} from "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol";
+import {UUPSUpgradeable} from "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol";
 import {PsmLibrary} from "../libraries/PsmLib.sol";
 import {VaultLibrary, VaultConfigLibrary} from "../libraries/VaultLib.sol";
 import {Id, Pair, PairLibrary} from "../libraries/Pair.sol";
@@ -9,32 +11,68 @@ import {ModuleState} from "./ModuleState.sol";
 import {PsmCore} from "./Psm.sol";
 import {VaultCore} from "./Vault.sol";
 import {Initialize} from "../interfaces/Init.sol";
+import {Context} from "@openzeppelin/contracts/utils/Context.sol";
+import {ContextUpgradeable} from "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol";
 
 /**
  * @title ModuleCore Contract
  * @author Cork Team
  * @notice Modulecore contract for integrating abstract modules like PSM and Vault contracts
  */
-contract ModuleCore is PsmCore, Initialize, VaultCore {
+contract ModuleCore is OwnableUpgradeable, UUPSUpgradeable, PsmCore, Initialize, VaultCore {
+    /// @notice __gap variable to prevent storage collisions
+    uint256[49] __gap;
+
     using PsmLibrary for State;
     using PairLibrary for Pair;
 
-    constructor(
+    /// @notice Initializer function for upgradeable contracts
+    function initialize(
         address _swapAssetFactory,
         address _ammFactory,
         address _flashSwapRouter,
         address _ammRouter,
-        address _config,
-        uint256 _psmBaseRedemptionFeePrecentage
-    )
-        ModuleState(_swapAssetFactory, _ammFactory, _flashSwapRouter, _ammRouter, _config, _psmBaseRedemptionFeePrecentage)
-    {}
+        address _config
+    ) external initializer {
+        if(_swapAssetFactory == address(0) || _ammFactory == address(0) || _flashSwapRouter == address(0) || _ammRouter == address(0) || _config == address(0)) {
+            revert ZeroAddress();
+        }
+
+        __Ownable_init(msg.sender);
+        __UUPSUpgradeable_init();
+        initializeModuleState(_swapAssetFactory, _ammFactory, _flashSwapRouter, _ammRouter, _config);
+    }
+
+    /// @notice Authorization function for UUPS proxy upgrades
+    function _authorizeUpgrade(address newImplementation) internal override onlyOwner {}
+
+    function _msgSender() internal view override(ContextUpgradeable, Context) returns (address) {
+        return super._msgSender();
+    }
+
+    function _msgData() internal view override(ContextUpgradeable, Context) returns (bytes calldata) {
+        return super._msgData();
+    }
+
+    function _contextSuffixLength() internal view override(ContextUpgradeable, Context) returns (uint256) {
+        return super._contextSuffixLength();
+    }
 
     function getId(address pa, address ra) external pure returns (Id) {
         return PairLibrary.initalize(pa, ra).toId();
     }
 
-    function initialize(address pa, address ra, uint256 lvFee, uint256 initialDsPrice) external override onlyConfig {
+    function initializeModuleCore(
+        address pa,
+        address ra,
+        uint256 lvFee,
+        uint256 initialDsPrice,
+        uint256 psmBaseRedemptionFeePercentage
+    )
+        external
+        override
+        onlyConfig
+    {
         Pair memory key = PairLibrary.initalize(pa, ra);
         Id id = key.toId();
 
@@ -48,48 +86,72 @@ contract ModuleCore is PsmCore, Initialize, VaultCore {
 
         address lv = assetsFactory.deployLv(ra, pa, address(this));
 
-        PsmLibrary.initialize(state, key);
+        PsmLibrary.initialize(state, key, psmBaseRedemptionFeePercentage);
         VaultLibrary.initialize(state.vault, lv, lvFee, ra, initialDsPrice);
-
-        emit Initialized(id, pa, ra, lv);
+        emit InitializedModuleCore(id, pa, ra, lv);
     }
 
-    function issueNewDs(Id id, uint256 expiry, uint256 exchangeRates, uint256 repurchaseFeePrecentage)
-        external
-        override
-        onlyConfig
-        onlyInitialized(id)
-    {
-        if (repurchaseFeePrecentage > 5 ether) {
+    function issueNewDs(
+        Id id,
+        uint256 expiry,
+        uint256 exchangeRates,
+        uint256 repurchaseFeePercentage,
+        uint256 decayDiscountRateInDays,
+        // won't have effect on first issuance
+        uint256 rolloverPeriodInblocks,
+        uint256 ammLiquidationDeadline
+    ) external override onlyConfig onlyInitialized(id) {
+        if (repurchaseFeePercentage > 5 ether) {
             revert InvalidFees();
         }
+
         State storage state = states[id];
 
         address ra = state.info.pair1;
 
-        uint256 prevIdx = state.globalAssetIdx++;
-        uint256 idx = state.globalAssetIdx;
-
         (address ct, address ds) = IAssetFactory(SWAP_ASSET_FACTORY).deploySwapAssets(
             ra, state.info.pair0, address(this), expiry, exchangeRates
         );
 
-        address ammPair = getAmmFactory().createPair(ra, ct);
+        // avoid stack to deep error
+        _initOnNewIssuance(id, repurchaseFeePercentage, ct, ds, expiry);
+        // avoid stack to deep error
+        getRouterCore().setDecayDiscountAndRolloverPeriodOnNewIssuance(
+            id, decayDiscountRateInDays, rolloverPeriodInblocks
+        );
+        VaultLibrary.onNewIssuance(
+            state, state.globalAssetIdx - 1, getRouterCore(), getAmmRouter(), ammLiquidationDeadline
+        );
+    }
 
-        PsmLibrary.onNewIssuance(state, ct, ds, ammPair, idx, prevIdx, repurchaseFeePrecentage);
+    function _initOnNewIssuance(
+        Id id,
+        uint256 repurchaseFeePercentage,
+        address ct,
+        address ds,
+        uint256 expiry
+    ) internal {
+        
+        State storage state = states[id];
+        
+        address ra = state.info.pair1;
+        uint256 prevIdx = state.globalAssetIdx++;
+        uint256 idx = state.globalAssetIdx;
+
+        address ammPair = getAmmFactory().createPair(ra, ct);
 
-        getRouterCore().onNewIssuance(id, idx, ds, ammPair, 0, ra, ct);
+        PsmLibrary.onNewIssuance(state, ct, ds, ammPair, idx, prevIdx, repurchaseFeePercentage);
 
-        VaultLibrary.onNewIssuance(state, prevIdx, getRouterCore(), getAmmRouter());
+        getRouterCore().onNewIssuance(id, idx, ds, ammPair, ra, ct);
 
         emit Issued(id, idx, expiry, ds, ct, ammPair);
     }
 
-    function updateRepurchaseFeeRate(Id id, uint256 newRepurchaseFeePrecentage) external onlyConfig {
+    function updateRepurchaseFeeRate(Id id, uint256 newRepurchaseFeePercentage) external onlyConfig {
         State storage state = states[id];
-        PsmLibrary.updateRepurchaseFeePercentage(state, newRepurchaseFeePrecentage);
+        PsmLibrary.updateRepurchaseFeePercentage(state, newRepurchaseFeePercentage);
 
-        emit RepurchaseFeeRateUpdated(id, newRepurchaseFeePrecentage);
+        emit RepurchaseFeeRateUpdated(id, newRepurchaseFeePercentage);
     }
 
     function updateEarlyRedemptionFeeRate(Id id, uint256 newEarlyRedemptionFeeRate) external onlyConfig {
@@ -103,15 +165,28 @@ contract ModuleCore is PsmCore, Initialize, VaultCore {
         Id id,
         bool isPSMDepositPaused,
         bool isPSMWithdrawalPaused,
+        bool isPSMRepurchasePaused,
         bool isLVDepositPaused,
         bool isLVWithdrawalPaused
     ) external onlyConfig {
         State storage state = states[id];
         PsmLibrary.updatePoolsStatus(
-            state, isPSMDepositPaused, isPSMWithdrawalPaused, isLVDepositPaused, isLVWithdrawalPaused
+            state,
+            isPSMDepositPaused,
+            isPSMWithdrawalPaused,
+            isPSMRepurchasePaused,
+            isLVDepositPaused,
+            isLVWithdrawalPaused
         );
 
-        emit PoolsStatusUpdated(id, isPSMDepositPaused, isPSMWithdrawalPaused, isLVDepositPaused, isLVWithdrawalPaused);
+        emit PoolsStatusUpdated(
+            id,
+            isPSMDepositPaused,
+            isPSMWithdrawalPaused,
+            isPSMRepurchasePaused,
+            isLVDepositPaused,
+            isLVWithdrawalPaused
+        );
     }
 
     /**
@@ -148,12 +223,17 @@ contract ModuleCore is PsmCore, Initialize, VaultCore {
 
     /**
      * @notice update value of PSMBaseRedemption fees
-     * @param newPsmBaseRedemptionFeePrecentage new value of fees
+     * @param newPsmBaseRedemptionFeePercentage new value of fees
      */
-    function updatePsmBaseRedemptionFeePrecentage(uint256 newPsmBaseRedemptionFeePrecentage) external onlyConfig {
-        if (newPsmBaseRedemptionFeePrecentage > 5 ether) {
+    function updatePsmBaseRedemptionFeePercentage(Id id, uint256 newPsmBaseRedemptionFeePercentage)
+        external
+        onlyConfig
+    {
+        if (newPsmBaseRedemptionFeePercentage > 5 ether) {
             revert InvalidFees();
         }
-        psmBaseRedemptionFeePrecentage = newPsmBaseRedemptionFeePrecentage;
+        State storage state = states[id];
+        PsmLibrary.updatePSMBaseRedemptionFeePercentage(state, newPsmBaseRedemptionFeePercentage);
+        emit PsmBaseRedemptionFeePercentageUpdated(id, newPsmBaseRedemptionFeePercentage);
     }
 }
