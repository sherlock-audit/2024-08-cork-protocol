diff a/Depeg-swap/contracts/libraries/VaultPoolLib.sol b/Depeg-swap/contracts/libraries/VaultPoolLib.sol	(rejected hunks)
@@ -1,4 +1,4 @@
-pragma solidity 0.8.24;
+pragma solidity ^0.8.24;
 
 import {VaultPool, VaultWithdrawalPool, VaultAmmLiquidityPool} from "./State.sol";
 import {MathHelper} from "./MathHelper.sol";
@@ -11,7 +11,6 @@ import {MathHelper} from "./MathHelper.sol";
 library VaultPoolLibrary {
     function reserve(VaultPool storage self, uint256 totalLvIssued, uint256 addedRa, uint256 addedPa) internal {
         uint256 totalLvWithdrawn = self.withdrawalPool.atrributedLv;
-        self.withdrawalPool.atrributedLv = totalLvWithdrawn;
 
         // RA
         uint256 totalRa = self.withdrawalPool.raBalance + addedRa;
@@ -42,7 +41,6 @@ library VaultPoolLibrary {
         uint256 addedPa
     ) internal pure {
         uint256 totalLvWithdrawn = withdrawalPool.atrributedLv;
-        withdrawalPool.atrributedLv = totalLvWithdrawn;
 
         // RA
         uint256 totalRa = withdrawalPool.raBalance + addedRa;
@@ -167,10 +165,10 @@ library VaultPoolLibrary {
         self.ammLiquidityPool.balance -= withdrawnFromAmm;
     }
 
-    function rationedToAmm(VaultPool storage self, uint256 ratio) internal view returns (uint256 ra, uint256 ct) {
-        uint256 amount = self.ammLiquidityPool.balance;
+    function rationedToAmm(VaultPool storage self, uint256 ratio, uint256 exchangeRate) internal view returns (uint256 ra, uint256 ct, uint256 originalBalance) {
+        originalBalance = self.ammLiquidityPool.balance;
 
-        (ra, ct) = MathHelper.calculateProvideLiquidityAmountBasedOnCtPrice(amount, ratio);
+        (ra, ct) = MathHelper.calculateProvideLiquidityAmountBasedOnCtPrice(originalBalance, ratio, exchangeRate);
     }
 
     function resetAmmPool(VaultPool storage self) internal {
